name: Build and Release PCF Control

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  SOLUTION_NAME: MySolution
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        
    - name: Install Power Platform CLI
      run: dotnet tool install --global Microsoft.PowerApps.CLI.Tool
        
    - name: Install BuildDataversePCFSolution
      run: |
        Write-Host "Installing BuildDataversePCFSolution..."
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/garethcheyne/BuildDataversePCFSolution/main/install.ps1" -OutFile "install-temp.ps1"
        & ".\install-temp.ps1" -Force -SkipSetup
        Remove-Item "install-temp.ps1"
        Write-Host "BuildDataversePCFSolution installed successfully"
      shell: pwsh
        
    - name: Run build script
      run: .\BuildDataversePCFSolution\build-solution.ps1 -BuildConfiguration "Release" -CiMode "GitHub"
      shell: pwsh
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pcf-control-build
        path: |
          out/
          releases/
        retention-days: 30
        
    - name: Upload solution packages
      uses: actions/upload-artifact@v4
      with:
        name: solution-packages
        path: releases/*.zip
        retention-days: 90
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download solution packages
      uses: actions/download-artifact@v4
      with:
        name: solution-packages
        path: ./releases/
        
    - name: List downloaded files
      run: ls -la releases/
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## ${{ env.SOLUTION_NAME }} ${{ github.ref }}
          
          ### ðŸš€ What's New
          - Latest features and improvements
          - Bug fixes and performance enhancements
          - Updated dependencies and security patches
          
          ### ðŸ’¾ Installation
          1. Download the solution package for your needs:
             - **Unmanaged**: For development environments
             - **Managed**: For production environments
          2. Import it into your Power Platform environment
          3. Configure the solution settings as needed
          4. Add the control to your forms or canvas apps
          
          ### ðŸ“‹ Requirements
          - Power Platform environment with PCF controls enabled
          - Appropriate permissions for solution import
          
          ### ðŸ”§ Configuration
          See the project README for detailed configuration instructions.
          
          ---
          
          **Built with automated CI/CD pipeline**
        draft: false
        prerelease: false

    - name: Upload Unmanaged Solution
      run: |
        UNMANAGED_FILE=$(find ./releases/ -name "*_unmanaged.zip" | head -1)
        if [ -n "$UNMANAGED_FILE" ]; then
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/zip" \
               --data-binary @"$UNMANAGED_FILE" \
               "${{ steps.create_release.outputs.upload_url }}?name=${{ env.SOLUTION_NAME }}_unmanaged.zip&label=Unmanaged Solution"
        fi

    - name: Upload Managed Solution
      run: |
        MANAGED_FILE=$(find ./releases/ -name "*_managed.zip" | head -1)
        if [ -n "$MANAGED_FILE" ]; then
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/zip" \
               --data-binary @"$MANAGED_FILE" \
               "${{ steps.create_release.outputs.upload_url }}?name=${{ env.SOLUTION_NAME }}_managed.zip&label=Managed Solution"
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    # Security scanning only runs on push to main branch (not on PRs from forks)
    if: github.event_name == 'push'
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      # Only upload SARIF on push events (not PRs) and continue on error for permission issues
      if: always() && github.event_name != 'pull_request'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

